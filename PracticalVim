実践Vim 学習記録
 4/28	tips3
'a+b'の+に余白を入れる作業を繰り返す場合。
a + b a + b a + b a + b a + b a + b これら全てに空白を入れる場合。
s 1文字を削除してインサートモードにする。
f文字 前方文字検索
; fコマンドで実行した検索の内容を繰り返す。
. 直前の動作を繰り返す。挿入モードに入ってから抜けるまでを記録している。
+の上でs押してから　+　として挿入モードを抜ける。その後ドットコマンドで繰り返す。この時にf+でカーソルを一気に移動させ、以降;でカーソル移動。結果として;.;.;.と繰り返すだけで完了する。

4/29	tips49
検索コマンドを用いて1行の中で最短で移動。
f{char} 1文字を現在行内の末尾に向かって検索。(Fも;も,ももちろん使える。)
t{char} 検索した文字の直前まで移動。(Tも)(till)
I'm so busy that I have no time to get around the city.
これをthat以降消したいがピリオドを残しておきたい時にtコマンドが便利。ftdt.で消せる。
f,Fはノーマルモードで使うことが多く、t,Tはオペレーター待機モードで使うことが多い。
検索コマンドを使うコツとして単語中で出現率の低い文字を選択すれば速い。
※ :set nospell

4/30	tips50
/word<CR> word検索。しかもどの行でもいける。n/Nで先に行ったり戻ったりもできる。コツは全部打ち込むよりちょうどいい塩梅でヒットするとこまで入力。
hlsearch 強調表示
incsearch tips81参照
This phrase takes time but eventually gets to the point.
1./tak<CR> v/ge<CR>hd ビジュアルモードで検索して1文字戻って削除。
2./tak<CR> d/ge<CR> この検索コマンドは排他的なモーション。最短。

5/1	tips4
・繰り返し操作
やりたいこと		操作		繰り返し	戻る

変更						{edit}		.				u
行内検索				f/t				;				,
検索						/(?)			n				N
置換						:s/--/--	&				u
一連の変更を実行	qx{change}q	@x		u

5/2	tips7,8
Exコマンド	コマンドラインモードで使うコマンド。(e.g.:wq)
Vimではアンドゥコマンドの粒度を自分で制御できる。挿入モードに入ってからノーマルモードに戻るまでを単一の変更とみなすので、モードの切り替え方で単語、センテンス、パラグラフに対してアンドゥを適用可。
インサートで行末にいるとき改行は<CR>で済むが、ctrl-[oで改行してアンドゥする単位を新規に作っていくのもあり。手が止まるようであれば基本的に挿入モードからぬけるべき。

5/3	tips118
スペルチェッカを無効にしといて最後に有効科してチェック。
Yoru mum has a moustache.
:set spell スペルチェック
[s/]s 前方/後方ジャンプ
z= 修正候補リスト。最初の候補が正しいと確信できるなら1z=。
zg/zw 現在の単語をスペルファイルに追加/削除
zug 現在のコマンドに対してzg/zwコマンドをアンドゥ。

5/4	tips87
:substituteコマンドの構文。
:[range]s/{pattern}/{string}/[flags]
:[tips28]s/{12章}/
置換コマンドの動作はフラグを使ってチューンできる。
gフラグ 1行の中にあるすべてのマッチが変更される(globally)
cフラグ ここの変更について実行するか確認する(confirm)
nフラグ 置換動作を行わずマッチの数を報告する(number)tips82
eフラグ エラーを非表示
&フラグ 直前の置換コマンドを実行
・置換文字列で使用する特殊文字
:s/new/new/g
It looks new bag.I want new one.New,new new,new.

5/5	tips5
vimで一番重要なのはドットコマンドで、次に重要なのが*コマンド。
* その時点でカーソル位置にある単語を検索する。
We're waiting for content before the site can go live.
If you are content with this, let's go ahead with it.
We'll launch as soon as we have the content.
:%s/old/new/g	%入れておくと1行内でなくページ内でやってくれる。
/cont * cwcopy n .

5/6	tips1,2,6
>G/<G	インデントを深く/浅く
カーソル移動用のキー入力１つと実行するキー入力が１つが理想形。
この方法をドットの公式と呼ぶ。

5/7	tips9 vimゴルフ
The end is night
書いている途中でnightを消したい時
1.dbx
2.bdw
3.daw (delete a word)
キーストロークの数は同じだが繰り返し性が高い(ドットコマンドの有用性)のは3の時。できる限り変更は繰り返し可能なものとする習慣をつける。

5/8	tips10 加算減算
<C-a> 加算 カーソル以降にある数字に適用。
<C-x> 減算
.blog, .news { background-image: url(/sprite.png); }
.blog { background-position: 3px 3px }
.news { background-position: 178px -540px }
yyp cW.news<ESC> 180<C-x>
※ 007など0が頭につくものは８進数表記になることがある。(set nrformats= などを.vimrcにいれとく。)

5/9 tips11 繰り返しか回数指定
Delete more than one word.
2dwとd2wとdw.の３通りが考えられるが消す単語数をミスした時のことを考えるとアンドゥの粒度が細かいドットが良い。d7wかd.......の場合、キーストロークでは前者が勝るが、数え間違いを防ぐために単語を数える暇があれはドットを7回押していった方がよい。
I have a couple of questions.
I have some more questions.
この変更では挿入も必要でドットコマンドを使うことにそれほど意味はない。c3wしてsome moreとする方が挿入モードに入る手間も省けて良い。

5/10	tips12	オペレータとモーションの組み合わせ
dコマンドはdl,daw,dapなど組み合わせられ、これはyコマンドやcコマンドにも可能。これらのコマンドをひっくるめてオペレータという。(:h operatorで確認できる。)
</>/=  インデント
gu/gU/g~ 小文字化/大文字化/入れ替え
!{motion} 外部プログラムでフィルタリング
オペレータとモーションは組み合わせる。(e.g. gUapでパラグラフ全体を大文字化。
)
以上のようにvimにはノーマル・挿入・ビジュアル・オペレーター待機モードがある。


5/11	tips13	挿入モードで削除
挿入モードでのうち間違えはバックスペースでの修正が早いかもしれないが、一単語消してから打ち直す方がいい練習になる。
挿入モードで使えるコマンド
<C-h>	1文字
<C-w> 1単語
<C-u> 行頭までを削除
これらのコマンドはノーマルモードに固有なものではない。それどころかvimに固有なものでもなく、vimのコマンドラインでもbashシェルのコマンドラインでも使える。

5/12	tips14	挿入ノーマルモード<C-o>
挿入ノーマルモードに込められる弾丸は一発のみ。
zz　画面を再描画し、その時にカーソルを画面の中央に持ってきてくれる。
<C-o>zzはめっちゃ便利でよく使う。

5/13	tips15	挿入モードで貼り付け<C-r>0
Practical Vim, by Drew Neil
Read Drew Neil's
Pの位置からyt, jA <C-r>0 .
このコマンドの一般的な形式は<C-r>{register}となる。{register}は挿入したいレジスタのアドレス。<C-r><C-p>{register}でインデントなどテキスト通りになるが、複数行ある場合はノーマルモードに戻る方がよい。

5/14 tips16	Expressionレジスタで計算<C-r>=
6 cahirs, each costing $35, totals $
A <C-r>= 6*35 <CR>
これは挿入モードで行わないとアンドゥコマンドを戻ってしまうことに注意。

5/15	tips16,17	文字コード
5/15	tips18	置換モード
Typing in Insert mode extends the line. But in Replace mode the line length does't change.
ピリオドをカンマに変えてbを小文字にする。
f. R, B<esc>
R 上書き
r 1文字置換してノーマルに戻る。
s 1文字置換してのそまま入力モード
gR/gr　仮想置換モード(タブを1文字としない)

tips20	ビジュアルモード
ビジュアルモードには三種類ある。
March
これをAprilに変えたかったらMarch上のどこかでviwとして入力。(iwはinner wordでawと違って続くホワイトスペースを含めない。)
vimには選択モードというものもあるがこれは他のテキストエディタのようにvimを使いたい人をつなぎとめておくためのもので特に使い道はない。ビジュアルモードの挙動で十分。

tips21	3種のビジュアルモード
v	文字指向のビジュアルモード
V	行指向のビジュアルモード
<C-v>	ブロック指向のビジュアルモード
gv	直前のビジュアルな選択範囲を再度選択。
o	強調表示されているテキストのもう一方に移動

tips22
def fib(n);
    a, b = 0, 1
    while a < n;
print a,
a, b = b, a + b;
fib(42)

tips23  ビジュアルモードと等価なオペレータモード
<p>one</p>
<p>two</p>
<p>three</p>
中身を全て大文字にしたい時vitでタグの中身をビジュアル選択し、Uで大文字にできるが、ドットコマンドを使うと三行目でeeが小文字のままになる。ビジュアルモードのドットコマンドは同じ範囲で行われる。gUitを使えばドットコマンドで適切に置き換わる。(it=inside the tag)変更作業を繰り返し行うときはビジュアルモードに入らずそれと等価なオペレータコマンドを優先すべき。

tips24  ビジュアルブロックモード<C-v>
Chapter      |  page
Normal mdode |  15
Insert mode  |  31
Visual mode  |  44
|を入れてもっと表っぽく見えるようにする。
<C-v>jjjxで無駄に開いた空白を一列分消す。gvコマンドで同じ範囲を再選択。r|で縦線が一気に入る。水平線は先頭行をコピーしてから行選択して全文字を置き換える。yypVr-

tips25  ビジュアルブロックモードで同時に挿入
url('/iamges/sprite/ping');
url('/iamges/sprite/ping');
url('/iamges/sprite/ping');
imagesフォルダからcomponentsフォルダに移したい時。<C-v>jjec components<Esc>
e 単語の最後まで移動
なお、一行目だけに変更は起こるがノーマルモードに戻るタイミングで全行に適用される。

tips26  箱型でない時のブロックビジュアルモード
var foo = 1
var bar = 'a'
var foobar = foo + bar
適当なところでブロック選択してAを押すといい感じになる。これは行指向のブロック選択だと単純にビジュアルモードを抜けるだけっぽい。<C-v>jj$A;<Esc>
さらにaやiだとうまくいかない。
コメントアウトしたいときは<C-v>jj0I#<Esc>

tips 27 コマンドラインモード
初めにedありき。
edからexができ、exからviができた。
そちて、viからVimができた。
---Unix旧約聖書
exの画面編集モードにする:visuail(:vi)コマンドがviの元。Vimはvi improvedを意味する。
:h vi-differences vimとの違い
viの先祖たちによる様々な制約があったが、そのおかげで非常に効率の良いコマンドセットが存在する。
Exコマンドの射程は広範囲。

tips28  Exコマンドのrange
:2,5s 2~5行目を指定
:%s/old/new/g
1:先頭行
$:最終行
0:先頭行の前の仮想的な行
.:カーソル行
%:ファイル全体

tips29  copy,move
:[range]t{address}  (copy To)
:6t.    6行目を現在行の下にコピー
:6t     現在行を6行目のしたにコピー
:.,$m0  現在行から最終行までを先頭行に移動

tips30  Exコマンドの射程とノーマルモードの柔軟性を組み合わせる
var foo = 1;
var bar = 'a'
var baz = 'z'
var foobar = foo + bar
var foobarbaz = foo + bar + baz
一行目にセミコロンを追加してからビジュアルモードで選択して:'<,'>normal.
:226,227normal A;でもいける。
全行をコメントアウト　:%normal i//

tips31  Exコマンドの繰り返し@:
バッファリストの各要素に対して反復処理を行う時に便利。
:bn[ext]
:bp[revious]
:next
<C-o>32

tips32  Exコマンドでタブ補完
<C-d>   補完候補一覧
<S-Tab> 逆順に補完候補表示
補完機能はwildmodeオプションを変更してカスタマイズできる。
<C-n>,<C-j>,<C-p>,<C-k>などで選択。

tips33  コマンドラインにコピー<C-r><C-w>
* カーソル位置の単語を検索
<C-r><C-w> カーソル位置にある単語をコピー
var tally;
for (counter = 1; tally <= 10; tally++){
    // do something with tally
};
tallyをcounterに変える。*cw counter<Esc>
この状態で:%s//<C-r><C-w>/g

tips34  コマンドラインの履歴
:<C-p>,<C-n>で履歴を上下できる。:helpとして上下するとhelpで始まるExコマンドをフィルタリングする。<Up><Down>でならフィルタリング機能を使えるので.vimrcに以下の設定。また、ヒストリはデフォで20なので増やしておく。
:set history=200
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

tips35  シェルの実行
:!ls シェルでlsを実行。
:ls Vimの組み込みコマンド。
% 現在編集中のファイルを表す。
:shell  シェルを開始する。exitでVimに戻ってくる。
:!{cmd} シェルでcmdを実行。
:read !{cmd}    シェルで{cmd}を実行しその標準入力をカーソルの下の行に挿入する。

tips36  バッファリスト
:ls バッファリストを表示
vi *.html
:bn/:np バッファリストを移動

tips37  引数リスト
:args
バッファリストはVimの機能で引数リストはviの機能。
*はディレクトリ内で検索を行うワイルドカード。**は指定したディレクトリのサブディレクトリまで再起的に検索する。

tips38  隠しバッファの取り扱い
よくわからんけど変更などの保存について。

tips39  分割ウィンドウ
<C-w>s/v  水平/垂直分割。入力内容はすべてに適用されるので大きいファイルの編集に便利。
<C-w><C-w>　ウィンドウ移動。<C-w>hjklでも可能。
:edit {filename}    展開されてる分割ウィンドウの一方に別のバッファを展開できる。:split {filename}を使うのも良い。
:sp {file}
:vsp {file}
:clo[se]    アクティブなウィンドウを閉じる。
:on[ly]     他のウィンドウを全て閉じる。
<C-w>=  すべてのウィンドウの幅と高さを同じにする。
<C-w>_/|  アクティブなウィンドウの高さ/幅を最大化。
[N]<C-w>_/| アクティブなウィンドウの高さ/幅を[N]にする。

tips40  タブ機能
:tabe[dit] {filename}   新しいタブでオープン
<C-w>T  現在のウィンドウを独立したタブに移動。
:tabc[lose] 現在のタブページを閉じる。
:tabo[nly]  アクティブなタブページ以外を閉じる。
{N}gt/gt/gT Nの/次の/前のタブ

tips41  editコマンド
:edit %:h<Tab>M<Tab>
.vimrcを編集して%%でいけるようにしておく。

tips42  :findコマンド,pathの設定
findは相対パスを全部書かなければいけないがよく使うファイルが深いネストに入っている場合面倒。あらかじめpathを構成しておけばパスを書く必要がない。
:set path+=app/**
**はサブディレクトリも含むワイルドカード。
rails.vimを使えばpathを設定しないでも:findコマンドを使える。ファイル名がユニークでない場合も<Tab>で選択できる。
